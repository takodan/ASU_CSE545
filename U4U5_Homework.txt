username: Takodan
email: ychan175@asu.edu

# 1
1. main會檢查"argv[1]", 且密碼明文存放main裡
2. 把密碼作為"argv[1]"運行main進入sh得到flag
# 2
1. main會檢查"argv[0] + 2"
2. 在/home/hacker建立用密碼作為名稱設立符號鏈結, "argv[0] + 2"會剛好等於密碼
3. 運行符號鏈結進入sh得到flag
# 3
1. main會檢查"argv[0]"
2. 使用"export PATH=$(echo ~):$PATH"將HOME加入PATH開頭
3. 現在可以直接以密碼字串執行符號鏈結, 讓main的"argv[0]"等於密碼
4. 運行符號鏈結進入sh得到flag
# 4
1. main會檢查"argv[1]", 只是會以MD5形式
2. main會明文存放轉換前的字串, 而且直接幫你轉換再做比對 
3. 把密碼作為"argv[1]"運行main進入sh得到flag
# 5
1. 同#4, 只是存放的密碼是MD5形式
2. 到網站"https://hashes.com/en/decrypt/hash"輸入MD5字串得到"mylittlepony"
3. 把"mylittlepony"作為"argv[1]"運行main進入sh得到flag
# 6
1. 同#4, 只是比較的是MD5原始輸出
2. "strncmp()"只要字串開頭是'\x00', "len_0"會是0, "strncmp(checksum_0, checksum_1, 0)"會回傳0, 代表字串相同
3. 寫一段python創立隨機字串, 轉換為MD5檢查原屬輸出開頭是否是'\x00'
4. 得到"6dpTaZ"作為"argv[1]"運行main進入sh得到flag
# 7

# 8
1. 在"/home/hacker"建立符號鏈結flag到"flag"
2. 運行main進入sh得到flag
# 9
1. 已有符號鏈結flag到"flag"
2. 運行main進入sh得到flag
# 10
1. 缺少environment variable BASE, 設定 BASE=""
2. 運行main進入sh得到flag
# 11
1. 路徑不能為"/flag", 設定 BASE="/", 使路徑指向相同檔案
2. 運行main進入sh得到flag
# 12
1. 同11
# 13
1. 路徑會先轉為realpath, 也不能為符號鏈結, 但是有main有sleep方便TOCTTOU
2. 先touch一個flag, 運行main檢查路徑, 再馬上發送SIGTSTP暫停程序
3. 刪除原本的flag, 更換成符號鏈結, 再讓main繼續
4. 進入sh得到flag
# 14
1. main可以注入參數成為命令
2. 使用"; cat /flag"得到flag
# 15
1. main可以注入參數成為命令, 但main有先加上雙引號
2. 使用"\"; cat /flag\""關閉雙引號得到flag
# 16
1. main可以注入參數成為命令, 但參數不能包含雙引號
2. 使用"\$(cat /flag>/home/hacker/Desktop/flag16.txt)"讓main先執行括號內命令
# 17
1. main不能直接命令注入, 但是execlp會使用PATH路徑運行tidy
2. 使用"export PATH=$(echo ~):$PATH"將HOME加入PATH開頭
3. 在/home/hacker建立符號鏈結tidy鏈接到/bin/sh
4. 運行main進入sh得到flag
# 18
1. main使用execlp運行tidy, 但不會有輸出
2. 寫一段C程式code18, 使用system()把"cat /flag"輸出到 flag.txt
3. 同#17更改PATH, 讓main運行符號鏈結tidy鏈接到code18, 得到flag
# 19
1. main可以命令注入
2. 使用"\$(cat /flag > /home/hacker/Desktop/flag19.txt)"輸出flag
# 20
1. main可以命令注入, 但不能使用"$"
2. 使用"|| cat /flag"得到flag
# 21
1. main可以命令注入, 但不能使用"|"
2. 使用"\`cat /flag > /home/hacker/Desktop/flag21.txt\`"輸出flag
# 22
1. main可以命令注入, 但不能使用"`"
2. 使用"flag && cat /flag"得到flag
# 23
1. 同22
# 24
1. main可以命令注入, 不能使用多種符號但find可以加上-exec
2. -exec需要有";"結尾, 改成"+"結尾且命令包含'"'
3. 使用"flag\" -exec cat \/flag {} \"+"得到flag
# 25
1. 同24, 只是不包含'"'
2.使用"flag -exec cat \/flag {} +"得到flag
# 26
1. 同24, 只是能不包含"flag"
2. 建立符號鏈接aLink到flag
3. 使用"aLink\" -exec cat {} \"+"得到flag

# 27
1. 運行`main`, 得到函數`give_me_a_shell`位置`0x401177`
2. 以`gdb`開啟`main`
3. 設定斷點`(gdb) b main.c:19`
4. 運行`(gdb) r`
5. 找到frame內的rip位置`(gdb) info frame`
6. rbp at 0x7fffbc00f180, rip at 0x7fffbc00f188
7. 看現在寄存器rsp的值`(gdb) info registers`
8. rsp = 0x7fffbc00f120
9. 計算rip-rsp`(gdb) p/x 0x7fffbc00f188 - 0x7fffbc00f120`
10. $1 = 0x68
11. 地址位置8一個單位, 計算偏移量`(gdb) p/x 0x68/8`
12. $2 = 0xd
13. 退出`gdb`, 運行`main 0xd 0x401177`進入shell
14. `cat /flag`得到pwn.collage{...}
# 28
1. angr反編譯找到進入shell需要{s_28} = 0x13371337
2. 根據提示找到deadb33f位置{s_28}需要更改位置參數為9
3. 輸入參數給main更改儲存的rip值`main 9 13371337`
4. 進入shell, 輸入`cat /flag`得到pwn.collage{...}
# 29
1. 根據提示似乎是要找到flag位置並更改值
2. 運行`main`一直顯示Segmentation fault, 找不到方式正確運行
#30

#31
1. 我們知道`is_god`在`buffer`後, 判斷`is_god`不為零即可進入shell
2. `buffer`只有32字節大, 提供一個大於32字節的字串作為參數運行`main`
